<relevant_code>



<file file_path=/src/com/atguigu/schedule/util/JDBCUtil.java>

        } catch (Exception e) {
            throw new RuntimeException(e);
        }


    }
    /*1 向外提供连接池的方法*/
    public static DataSource getDataSource(){
        return dataSource;
    }

    /*2 向外提供连接的方法*/
    public static Connection getConnection(){
        Connection connection = threadLocal.get();
        if (null == connection) {
            try {
                connection = dataSource.getConnection();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
            threadLocal.set(connection);
        }

        return connection;
    }


    /*定义一个归还连接的方法 (解除和ThreadLocal之间的关联关系) */
    public static void releaseConnection(){
        Connection connection = threadLocal.get();
        if (null != connection) {
            threadLocal.remove();
            // 把连接设置回自动提交的连接
            try {
                connection.setAutoCommit(true);
                // 自动归还到连接池
                connection.close();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
        }
    }
}
</file>



<file file_path=/src/com/atguigu/schedule/pojo/SysUser.java>
package com.atguigu.schedule.pojo;

import lombok.*;

@AllArgsConstructor//生成全参构造器
@NoArgsConstructor//生成无参构造器
@Data//生成get set方法


public class SysUser {
    private Integer uid;
    private String username;
    private String userPwd;

    
}

</file>



<file file_path=/web/loginUserPwdError.html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<h1>登录失败,密码有误,请求<a href="login.html">重新登录</a></h1>

</body>
</html>
</file>



<file file_path=/src/com/atguigu/schedule/util/MD5Util.java>
package com.atguigu.schedule.util;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
public final class MD5Util {
    public static String encrypt(String strSrc) {
        try {
            char hexChars[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8',
                    '9', 'a', 'b', 'c', 'd', 'e', 'f' };
            byte[] bytes = strSrc.getBytes();
            MessageDigest md = MessageDigest.getInstance("MD5");
            md.update(bytes);
            bytes = md.digest();
            int j = bytes.length;
            char[] chars = new char[j * 2];
            int k = 0;
            for (int i = 0; i < bytes.length; i++) {
                byte b = bytes[i];
                chars[k++] = hexChars[b >>> 4 & 0xf];
                chars[k++] = hexChars[b & 0xf];
            }
            return new String(chars);
        } catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            throw new RuntimeException("MD5加密出错!!!");
        }
    }
}
</file>



<file file_path=/web/static/js/login.js>
// 校验用户名密码是否符合格式
function checkForm() {
    var flag1 = checkUsername();
    var flag2 = checkUserPwd();
    return flag1 && flag2;
}

// 校验用户名是否符合格式
function checkUsername() {
    // 定义正则表示字符串的规则,用户名必须以字母开头，长度在5-16之间,并且只能是字母数字下划线
    var usernameReg = /^[a-zA-Z]\w{4,15}$/;
    // 获得用户输入的信息
    var usernameInput = document.getElementById("usernameInput");
    var username = usernameInput.value;
    // 获得格式提示的框
    var usernameMsg01 = document.getElementById("usernameMsg01");
    var usernameMsg02 = document.getElementById("usernameMsg02");
    // 格式有误返回false，在页面上提示
    if(!usernameReg.test(username)){
        usernameMsg01.innerHTML = "提示:";
        usernameMsg02.innerHTML = "必须以字母开头且长度在5-10之间";
        return false;
    }
    // 格式正确时,返回true，在页面上提示OK
    usernameMsg01.innerText="";
    usernameMsg02.innerText="OK";
    return true;
}

// 校验密码是否符合格式
function checkUserPwd(){
    // 定义正则表示字符串的规则
    var  userPwdReg= /^[0-9]{6}$/;
    // 获得用户在页面上输入的信息
    var userPwdInput =document.getElementById("userPwdInput");
    var userPwd = userPwdInput.value;
    // 获得格式提示的框
    var userPwdMsg01 =document.getElementById("userPwdMsg01");
    var userPwdMsg02 =document.getElementById("userPwdMsg02");
    // 格式有误时,返回false,在页面上提示
    if(!userPwdReg.test(userPwd)){
        userPwdMsg01.innerText="提示:";
        userPwdMsg02.innerText="必须是6位数字";
        return false;
    }
    // 格式正确时,返回true，在页面上提示OK

// ...rest of code...
nerText="";
    return true;

}

//校验两次密码是否一致
function reCheckReUserPwd() {
    var userPwdInput = document.getElementById("userPwdInput");
    var userPwd = userPwdInput.value;
    var userPwd2Input = document.getElementById("reUserPwdInput");
    var userPwd2 = userPwd2Input.value;
    var reUserPwdMsg01 = document.getElementById("reUserPwdMsg01");
    var reUserPwdMsg02 = document.getElementById("reUserPwdMsg02");
    if (userPwd !== userPwd2) {
        reUserPwdMsg01.innerText = "提示:";
        reUserPwdMsg02.innerText = "两次密码不一致";
        return false;
    }
    reUserPwdMsg01.innerText = "";
    reUserPwdMsg02.innerText = "OK";
    return true;
}

//鼠标在登录按钮上悬停时，改变按钮的颜色,鼠标移开时恢复颜色,鼠标变为手型
function changeBtnColor() {
    var Btn = document.getElementById("Btn");
    Btn.style.backgroundColor = "#6c5f1a";
    Btn.style.cursor = "pointer";
}

//鼠标移开时恢复按钮颜色
function recoverBtnColor() {
    var Btn = document.getElementById("Btn");
    Btn.style.backgroundColor = "#ffd700";
}

function changeBtn1Color(){
    var Btn1 = document.getElementById("Btn1");
    Btn1.style.backgroundColor = "#6c5f1a";
    Btn1.style.cursor = "pointer";
}

function recoverBtn1Color(){
    var Btn1 = document.getElementById("Btn1");
    Btn1.style.backgroundColor = "antiquewhite";
}

function changeBtn2Color(){
    var Btn2 = document.getElementById("Btn2");
    Btn2.style.backgroundColor = "#6c5f1a";
    Btn2.style.cursor = "pointer";
}

function recoverBtn2Color(){
    var Btn2 = document.getElementById("Btn2");
    Btn2.style.backgroundColor = "antiquewhite";
}
</file>



<file file_path=/web/registSuccess.html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<h1>注册成功,请立刻去<a href="login.html">登录</a></h1>

</body>
</html>
</file>



<file file_path=/src/com/atguigu/schedule/test/TestBaseDao.java>
package com.atguigu.schedule.test;

import com.atguigu.schedule.dao.BaseDao;
import com.atguigu.schedule.pojo.SysUser;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.util.List;

public class TestBaseDao {

    private static BaseDao baseDao;

    @BeforeClass
    public static void initBaseDao(){
        baseDao=new BaseDao();
    }

    @Test
    public void testBaseQueryObject(){
        // 查询用户数量  baseQueryObject 查询结果集是单行 单列的 一个值的数据的方法
        String sql ="select count(*) from sys_user";
</file>



<file file_path=/web/loginUsernameError.html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>
</head>
<body>
<h1>登录失败,账户有误,请求<a href="login.html">重新登录</a></h1>

</body>
</html>
</file>



</relevant_code>
